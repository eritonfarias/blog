<?xml version="1.0" encoding="utf-8"?>
<rss version="2.0"><channel><title>Klaus Laube - behave</title><link>https://klauslaube.com.br/</link><description>Python, Django e desenvolvimento Web</description><lastBuildDate>Wed, 03 Feb 2016 23:50:00 -0200</lastBuildDate><item><title>BDD com Django e Behave</title><link>https://klauslaube.com.br/2016/02/03/bdd-com-django-e-behave.html</link><description>&lt;p&gt;&lt;img class="align-left" src="/images/blog/bdd-given-when-then.jpg" width="180" height="180" title="Given, When, Then (opkey.crestechglobal.com)" alt="Given, When, Then (opkey.crestechglobal.com)"&gt;&lt;/p&gt;
&lt;p&gt;Testar o comportamento da sua aplicação, ao invés de pequenos módulos isolados,
é uma grande prática no que diz respeito a escrita de testes que guiem o
seu desenvolvimento. Deixando a polêmica do "&lt;a href="http://david.heinemeierhansson.com/2014/tdd-is-dead-long-live-testing.html" title="TDD is dead. Long live testing."&gt;TDD is dead&lt;/a&gt;"
de lado, criar cenários que garantem um determinado fluxo, além de servir
como um excelente contrato à sua suite de aceitação, é uma ótima ferramenta
para garantir que a integração &lt;em&gt;back-end/front-end&lt;/em&gt; está funcionando de acordo
com o esperado.&lt;/p&gt;
</description><dc:creator xmlns:dc="http://purl.org/dc/elements/1.1/">Klaus Peter Laube</dc:creator><pubDate>Wed, 03 Feb 2016 23:50:00 -0200</pubDate><guid isPermaLink="false">tag:klauslaube.com.br,2016-02-03:/2016/02/03/bdd-com-django-e-behave.html</guid><category>desenvolvimento</category><category>testes</category><category>bdd</category><category>aceitação</category><category>python</category><category>django</category><category>behave</category><category>splinter</category></item></channel></rss>